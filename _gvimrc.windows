" The gui/gui_running feature indicates whether Vim has been compiled such that the GUI feature is available.
" 
" feature-list
"
" gui			Compiled with GUI enabled
" gui_athena	Compiled with Athena GUI.
" gui_gnome		Compiled with Gnome support (gui_gtk is also defined).
" gui_gtk		Compiled with GTK+ GUI (any version).
" gui_gtk2		Compiled with GTK+ 2 GUI (gui_gtk is also defined).
" gui_mac		Compiled with Macintosh GUI.
" gui_motif		Compiled with Motif GUI.
" gui_photon	Compiled with Photon GUI.
" gui_running	Vim is running in the GUI, or it will start soon.
" gui_win32		Compiled with MS Windows Win32 GUI.
" gui_win32s	idem, and Win32s system being used (Windows 3.1)
"
" mac			Macintosh version of Vim.
" macunix		Macintosh version of Vim, using Unix files (OS-X).
"
" unix			Unix version of Vim.
"
" win16			Win16 version of Vim (MS-Windows 3.1).
" win32			Win32 version of Vim (MS-Windows 95 and later, 32 or 64 bits)
" win32unix		Win32 version of Vim, using Unix files (Cygwin)
" win64			Win64 version of Vim (MS-Windows 64 bit).
" win95			Win32 version for MS-Windows 95/98/ME.

if has("gui_running")

    " windows
    set guifont=Ubuntu_Mono_derivative_Powerlin:h11:cRUSSIAN

    " To enable the saving and restoring of screen positions.
    let g:screen_size_restore_pos = 1

    " To save and restore screen for each Vim instance.
    " This is useful if you routinely run more than one Vim instance.
    " For all Vim to use the same settings, change this to 0.
    let g:screen_size_by_vim_instance = 1

    " remove toolbar
    set guioptions-=T

    " Disable cursor blinking:
    set guicursor+=a:blinkon0

    " Version 1 (Vim 7 and above)
    if v:version >= 700

        function! ScreenFilename()
            if has('amiga')
                return "s:.vimsize"
            elseif has('win32')
                return $HOME.'\_vimsize'
            else
                return $HOME.'/.vimsize'
            endif
        endfunction

        function! ScreenRestore()
            " Restore window size (columns and lines) and position
            " from values stored in vimsize file.
            " Must set font first so columns and lines are based on
            " font size.
            let f = ScreenFilename()
            if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
                let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
                for line in readfile(f)
                    let sizepos = split(line)
                    if len(sizepos) == 5 && sizepos[0] == vim_instance
                        silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
                        silent! execute "winpos ".sizepos[3]." ".sizepos[4]
                        return
                    endif
                endfor
            endif
        endfunction

        function! ScreenSave()
            " Save window size and position.
            if has("gui_running") && g:screen_size_restore_pos
                let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
                let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' . (getwinposx()<0?0:getwinposx()) . ' ' . (getwinposy()<0?0:getwinposy())
                let f = ScreenFilename()
                if filereadable(f)
                    let lines = readfile(f)
                    call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
                    call add(lines, data)
                else
                    let lines = [data]
                endif
                call writefile(lines, f)
            endif
        endfunction

        if !exists('g:screen_size_restore_pos')
            let g:screen_size_restore_pos = 1
        endif
        if !exists('g:screen_size_by_vim_instance')
            let g:screen_size_by_vim_instance = 1
        endif
        autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
        autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif

        " end version 7.0
    endif

endif

set mousehide		" Hide the mouse when typing text


" see :help mksession


" Determine OS {{{

" if operating_system == 'MS Windows'


" os.fullname
for s:osfullname in [ "unix", "win16",   "win32", "win64", "win32unix", "win95",
            \ "mac",  "macunix", "amiga", "os2",   "beos",      "vms" ]
    if has(s:osfullname)
        break
    endif
    let s:osfullname='unknown'
endfor

" os.name
if s:osfullname[-3:] is 'nix' || s:osfullname[:2] is 'mac' ||
            \ s:osfullname      is 'qnx' || s:osfullname     is 'vms'
    let s:osname = 'posix'
elseif s:osfullname[:2] is 'win'
    let s:osname = 'nt'
elseif s:osfullname is 'os2'
    let s:osname = 'os2'
else
    let s:osname = 'other'
endif

" }}}


if has("win16") || has("win32") || has("win64") || has("win95")
    let g:mswin = 1
endif

if g:mswin

    "
    " Set options and add mapping such that Vim behaves a lot like MS Windows
    "

    " set the 'cpoptions' to its Vim default
    if 1	" only do this when compiled with expression evaluation
        let s:save_cpo = &cpoptions
    endif
    set cpo&vim

    " set 'selection', 'selectmode', 'mousemodel' and 'keymodel' for MS-Windows
    behave mswin

    " backspace and cursor keys wrap to previous/next line
    set backspace=indent,eol,start whichwrap+=<,>,[,]

    " backspace in Visual mode deletes selection
    vnoremap <BS> d

    " CTRL-X and SHIFT-Del are Cut
    vnoremap <C-X> "+x
    vnoremap <S-Del> "+x

    " CTRL-C and CTRL-Insert are Copy
    vnoremap <C-C> "+y
    vnoremap <C-Insert> "+y

    " CTRL-V and SHIFT-Insert are Paste
    map <C-V> "+gP
    map <S-Insert> "+gP

    cmap <C-V> <C-R>+
    cmap <S-Insert> <C-R>+

    " Pasting blockwise and linewise selections is not possible in Insert and
    " Visual mode without the +virtualedit feature.  They are pasted as if they
    " were characterwise instead.
    " Uses the paste.vim autoload script.
    " Use CTRL-G u to have CTRL-Z only undo the paste.

    exe 'inoremap <script> <C-V> <C-G>u' . paste#paste_cmd['i']
    exe 'vnoremap <script> <C-V> ' . paste#paste_cmd['v']

    imap <S-Insert>		<C-V>
    vmap <S-Insert>		<C-V>

    " Use CTRL-Q to do what CTRL-V used to do
    noremap <C-Q>		<C-V>

    " Use CTRL-S for saving, also in Insert mode
    noremap <C-S>		:update<CR>
    vnoremap <C-S>		<C-C>:update<CR>
    inoremap <C-S>		<C-O>:update<CR>

    " For CTRL-V to work autoselect must be off.
    " On Unix we have two selections, autoselect can be used.
    if !has("unix")
        set guioptions-=a
    endif

    " CTRL-Z is Undo; not in cmdline though
    noremap <C-Z> u
    inoremap <C-Z> <C-O>u

    " CTRL-Y is Redo (although not repeat); not in cmdline though
    noremap <C-Y> <C-R>
    inoremap <C-Y> <C-O><C-R>

    " Alt-Space is System menu
    if has("gui")
        noremap <M-Space> :simalt ~<CR>
        inoremap <M-Space> <C-O>:simalt ~<CR>
        cnoremap <M-Space> <C-C>:simalt ~<CR>
    endif

    " CTRL-A is Select all
    noremap <C-A> gggH<C-O>G
    inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
    cnoremap <C-A> <C-C>gggH<C-O>G
    onoremap <C-A> <C-C>gggH<C-O>G
    snoremap <C-A> <C-C>gggH<C-O>G
    xnoremap <C-A> <C-C>ggVG

    " CTRL-Tab is Next window
    noremap <C-Tab> <C-W>w
    inoremap <C-Tab> <C-O><C-W>w
    cnoremap <C-Tab> <C-C><C-W>w
    onoremap <C-Tab> <C-C><C-W>w

    " CTRL-F4 is Close window
    noremap <C-F4> <C-W>c
    inoremap <C-F4> <C-O><C-W>c
    cnoremap <C-F4> <C-C><C-W>c
    onoremap <C-F4> <C-C><C-W>c

    " restore 'cpoptions'
    set cpo&
    if 1
        let &cpoptions = s:save_cpo
        unlet s:save_cpo
    endif

endif	" g:mswin

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" vim:ft=vim
